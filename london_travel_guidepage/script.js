const chatWrapper = document.getElementById('chat-wrapper');
const replyBtn = document.getElementById('reply-btn');
const userInput = document.getElementById('user-input');

let currentIndex = 0;

const chatData = [
  { role: 'assistant', text: "Hi! I'm Lucy, your personalized travel assistant for London. Let me help you plan a unique London trip using our website!" },
  { role: 'user', text: "I can just find recommendations on Tripadvisor. What makes this site different?" },
  { role: 'assistant', text: "I understand your concern. Most standard travel websites offer general suggestions that don't account for individual interests." },
  { role: 'assistant', text: "Our personalized planning service generates walking tour routes tailored to your specific travel preferences. We can also recommend unique places that are more popular among locals." },
  { role: 'user', text: "How can you guarantee the recommendations will really suit me?" },
  { role: 'assistant', text: "Our platform uses attraction data from the UK Office for National Statistics and the Association of Leading Visitor Attractions, including foot traffic, optimal visiting times, and popularity rankings." },
  { role: 'assistant', text: "We offer clear filters so you can easily indicate your interests—such as museums, historic neighborhoods, or city landmarks. Just select a few preferences and tell me where you're starting from, and the system will generate the best route for you." },
  { role: 'assistant', text: "You can also check the sample animation on the right to see how well our recommendations fit your expectations." },
  { role: 'user', text: "Sounds okay... but is your data up to date? I don't want to be recommended places that are closed. Also, how do you ensure the route actually saves time?" },
  { role: 'assistant', text: "Our platform uses the latest 2024 attraction data, and integrates with Mapbox's real-time walking route optimization. Each route is generated by analyzing actual walking distances between locations to ensure it's the most efficient CityWalk path." },
  { role: 'assistant', text: "You can use our website to experience the speed and accuracy of the planning process directly." },
  { role: 'user', text: "Alright... but what if I don't like the suggested route? Can I change it?" },
  { role: 'assistant', text: "No need to worry. The default route is optimized to include up to 10 locations while minimizing walking time based on your starting point and preferences." },
  { role: 'assistant', text: "If you're not satisfied, you can always modify the types of attractions or reset your starting point. The system will automatically regenerate the route." },
  { role: 'user', text: "Sounds pretty good... One last question—does this service cost anything?" },
  { role: 'assistant', text: "This website is completely free to use. Let's get started!" },
  { role: 'assistant', text: '<button class="start-btn" onclick="startGuide()">Start Now</button>' }
];

function appendBubble(role, text) {
  const bubble = document.createElement('div');
  bubble.className = `bubble ${role} visible`;
  bubble.innerHTML = text;
  chatWrapper.appendChild(bubble);
  chatWrapper.scrollTop = chatWrapper.scrollHeight;
}

// 显示一条 assistant 消息
function showAssistantLine(callback) {
  if (currentIndex < chatData.length && chatData[currentIndex].role === 'assistant') {
    appendBubble('assistant', chatData[currentIndex].text);
    currentIndex++;
    setTimeout(callback, 1000); // 下一条延迟 1 秒
  } else {
    callback(); // 没有更多 assistant 时，直接回调
  }
}

// 一次显示多条 assistant，直到遇到 user
function showAssistantUntilNextUser() {
  if (currentIndex >= chatData.length) return;

  const runNext = () => {
    if (currentIndex < chatData.length && chatData[currentIndex].role === 'assistant') {
      showAssistantLine(runNext);
    } else if (chatData[currentIndex] && chatData[currentIndex].role === 'user') {
      const userText = chatData[currentIndex].text;
      userInput.value = userText;
      userInput.disabled = true; // 保持输入不可编辑
      replyBtn.disabled = false;
    }
  };

  runNext();
}

// 初始化只显示第一条 assistant
window.addEventListener('load', () => {
  showAssistantLine(() => {
    const userText = chatData[currentIndex].text;
    if (chatData[currentIndex].role === 'user') {
      userInput.value = userText;
      userInput.disabled = true;
      replyBtn.disabled = false;
    }
  });
});

// 点击“回复”按钮
replyBtn.addEventListener('click', () => {
  appendBubble('user', userInput.value);
  currentIndex++; // 跳过 user 消息
  userInput.value = '';
  userInput.disabled = true;
  replyBtn.disabled = true;

  setTimeout(() => {
    showAssistantUntilNextUser();
  }, 600);
});

function startGuide() {
  document.getElementById('guide-section').style.display = 'flex';
  document.getElementById('guide-section').scrollIntoView({ behavior: 'smooth' });
}